/*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  :: EMPRESA    : Sinqia                                                       ::
  :: SISTEMA    : SQ Crédito                                                   ::
  :: MÓDULO     : Relatório - Cancelamentos                                    ::
  :: OBSERVAÇÃO :                                                              ::
  ::- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -::
  :: PROGRAMADOR:                                                              ::
  :: DATA       :                                           VERSÃO FXML:       ::
  :: ALTERAÇÃO  :                                                              ::
  ::- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -::
  :: PROGRAMADOR: Matheus Reynard                                              ::
  :: DATA       : 31/03/2022                                VERSÃO FXML:     1 ::
  :: ALTERAÇÃO  : Primeira Versão                                              ::
  ::              SQCWB-46276 - Migração Relatórios - Cancelamentos            ::
  :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/


package x04sp01.view;

import java.util.HashMap;
import java.util.List;

import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import x00sp01.x00t.ABDComando;
import x00sp01.x00t.AProperties;
import x00sp01.x00t.TEntidadeCrud;
import x00sp01.x00t.TParamApp;
import x00sp02.entidade.TMDQueryEntidade.TTypeComando;
import x00sp03.x00c.TTIAssistImpres;
import x00sp03.x00c.TTICheckBox;
import x00sp03.x00c.TTIComboBox;
import x00sp03.x00c.TTIEdit;
import x00sp03.x00c.TTILabelLocalizar;
import x00sp03.x00i.IAssistImpres;
import x00sp03.x00s.X00SU0301A;
import x00sp03.x00t.TControllerTela;
import x00sp03.x00t.TLabelLocalizarActionFiltro;
import x00sp03.x00t.TMDQuery;
import x00sp03.x00t.TParamAppCliente;
import x04sp00.entidade.TEM81;
import x04wp01.entidade.TEM01;
import x04wp01.entidade.TEM83;
import x04wp01.entidade.TX04SR01280;
import x04wp01.facade.TX04SR01280Facade;



public class X04SR01280 extends TControllerTela implements IAssistImpres {
  
  private static final String ENT_NR_VRS = "4";
  private static final Integer ENT_CD_ERRO = 0;
  private TTIAssistImpres assistImpress;
  
  private static final String RELATORIO_BAIXAS_SINTETICO = "fncRelatorioBaixasSintetico";
  private static final String RELATORIO_BAIXAS_ANALITICO = "fncRelatorioBaixasAnalitico";

  @FXML private TTILabelLocalizar lbLocalizarInst;
  @FXML private TTILabelLocalizar lbLocalizarCli;
  @FXML private TTILabelLocalizar lbLocalizarContraOrigem;
  @FXML private TTILabelLocalizar lbLocalizarContraAcordo;
  @FXML private TTILabelLocalizar lbLocalizarAcordo;
  @FXML private TTILabelLocalizar lbLocalizarPresta;
  
  @FXML private TTIEdit DtMovIni;
  @FXML private TTIEdit DtMovFim;
  @FXML private TTIEdit DtAtuIni;
  @FXML private TTIEdit DtAtuFim;
  
  @FXML private TTIComboBox cbxTpPessoa;  
  @FXML private TTIComboBox cbxTpErro;  
  
  public void initialize() {
    inicializar();  
  }
  
  private void inicializar() {
    lbLocalizarInst.setSelecionadoCD(getParamApp().getInstituicaoId());
    DtMovFim.setValor(getParamApp().getDataRefAtual());
    DtMovIni.setValor(getParamApp().getDataRefIni());
    DtAtuFim.setValor(getParamApp().getDataRefAtual());
    DtAtuIni.setValor(getParamApp().getDataRefIni());
    
    lbLocalizarContraOrigem.setSQLLabelLocalizarMDQuery(localizarContratoOrigem());
    lbLocalizarAcordo.setSQLLabelLocalizarMDQuery(localizarAcordo());
    lbLocalizarPresta.setSQLLabelLocalizarMDQuery(localizarPrestacao());
  }
  
  public String fncMetodoDbInterface() {    
    switch(assistImpress.getParamEntSPTipoRel()) {
    case "01":
      return RELATORIO_BAIXAS_SINTETICO;
    case "02":
      return RELATORIO_BAIXAS_ANALITICO;
    default:
      return RELATORIO_BAIXAS_SINTETICO;
    }       
  }
  
  private TParamApp getParamApp() {
    return TParamAppCliente.getInstance();
  }

  @Override
  public String fncConsisteCampos() throws Exception {
    return null;
  }

  @Override
  public String fncRecuperaSubTitulo1() throws Exception {
    return null;
  }

  @Override
  public String fncRecuperaSubTitulo2() {
    return "Ref.: " + DtMovIni.getText() + " a " + DtMovFim.getText();
  }

  @Override
  public Integer fncRecuperarAgencia() {
    return null;
  }

  @Override
  public Long fncBuscarFonteData() throws Exception {
    return null;
  }

  @Override
  public String fncBuscaFonteDados(String TpArquivo) throws Exception {
    return null;
  }

  @Override
  public void proParametrosAutomacao(HashMap<String, String> HasMapAutomacao,
      HashMap<String, String> HasMapCamposOrdenacao, HashMap<String, String> HasMapParametros) throws Exception {    
  }

  @Override
  public void proInicializa() throws Exception {    
  }

  @Override
  public String fncRecuperaParametros() {
    return null;
  }
  
  public Class<?> fncClassInterfaceWs() {
    return TX04SR01280Facade.class;
  }
  
  
  /*====================================================*/
  /* Recupera os valores dos campos e seta na entidade  */
  /*====================================================*/
  
  public Object fncEntidadeFiltro() throws Exception {    
    TX04SR01280 entidade = new TX04SR01280();    
    entidade.setENT_NR_VRS(ENT_NR_VRS);
    entidade.setENT_NR_INST(lbLocalizarInst.getCodigo().isEmpty() ? null : Integer.parseInt(lbLocalizarInst.getCodigo()));
    entidade.setENT_DT_ATUINI(DtAtuIni.getValor().isEmpty() ?  null : Integer.parseInt(DtAtuIni.getValor()));
    entidade.setENT_DT_ATUFIM(DtAtuFim.getValor().isEmpty() ?  null : Integer.parseInt(DtAtuFim.getValor()));
    entidade.setENT_DT_MOVINI(DtMovIni.getValor().isEmpty() ?  null : Integer.parseInt(DtMovIni.getValor()));
    entidade.setENT_DT_MOVFIM(DtMovFim.getValor().isEmpty() ?  null : Integer.parseInt(DtMovFim.getValor()));  
    entidade.setENT_CD_CLIENT(lbLocalizarCli.getCodigo().isEmpty() ? null : Long.parseLong(lbLocalizarCli.getCodigo()));     
    entidade.setENT_NR_CONTRA(lbLocalizarContraOrigem.getCodigo().isEmpty() ? null : Long.parseLong(lbLocalizarContraOrigem.getCodigo()));
    entidade.setENT_NR_ACORDO(lbLocalizarAcordo.getCodigo().isEmpty() ? null : Integer.parseInt(lbLocalizarAcordo.getCodigo()));
    entidade.setENT_NR_PRESTA(lbLocalizarPresta.getCodigo().isEmpty() ? null : Long.parseLong(lbLocalizarPresta.getCodigo()));
    
    entidade.setENT_CD_ERRO(ENT_CD_ERRO);  // int
    entidade.setENT_NR_CTRACD(null); // long
    
    /*entidade.setENT_NR_PRODUT(lbLocalizarProd.getCodigo().isEmpty() ? null : Integer.parseInt(lbLocalizarProd.getCodigo())); 
    entidade.setENT_NR_CONTRA(lbLocalizarContra.getCodigo().isEmpty() ? null : Long.parseLong(lbLocalizarContra.getCodigo()));
    entidade.setENT_NR_CRES(lbLocalizarCResp.getCodigo().isEmpty() ? null : Long.parseLong(lbLocalizarCResp.getCodigo()));
    entidade.setENT_TP_DATA(null);
    entidade.setENT_DT_INI(deDtMov.getValor().isEmpty() ?  null : Integer.parseInt(deDtMov.getValor()));
    entidade.setENT_DT_FIM(ateDtMov.getValor().isEmpty() ? null : Integer.parseInt(ateDtMov.getValor()));  
    entidade.setENT_NR_SITUAC(getSituacao());
    entidade.setENT_CD_CONVEN(null);
    entidade.setENT_CD_FILIAL(null); 
    entidade.setENT_CD_AGENT(null); 
    entidade.setENT_CD_GRPPRO(null);
    entidade.setENT_TP_CONTRA(null);
    entidade.setENT_TP_PESSOA(null);
    entidade.setENT_ID_ATIVWF(ENT_ID_ATIVWF);
    entidade.setENT_DT_REFERE(null);
    entidade.setENT_ID_FINEMP(null);
    entidade.setENT_ID_STATUS(ENT_ID_STATUS); 
    entidade.setENT_NR_MOEDA(null);  */
    return entidade;
  }
  
  public void setAssistImpres(TTIAssistImpres assistImpres) {
    assistImpress = assistImpres;
  }
  
  /*====================================================*/
  /* Funções onBeforeLocalizar                          */
  /*====================================================*/
  
  @FXML
  private TMDQuery localizarContratoOrigem() {
    TMDQuery<TEntidadeCrud> query = new TMDQuery<TEntidadeCrud>(TTypeComando.tcmSQL);
    try {
      query.setQuery(QueryBuscarContrato.class);
      query.setRetornaResultSet(true);
      query.proAddParamFmt(lbLocalizarInst.getCodigo().isEmpty() ? "EM01_NR_INST" : lbLocalizarInst.getCodigo());
      query.proAddParamFmt(getParamApp().getAgenciaId());
      query.proAddParamFmt(lbLocalizarCli.getCodigo().isEmpty() ? "EM01_CD_CLIENT" : lbLocalizarCli.getCodigo());
      return query;
    } catch (Exception e) {
      X00SU0301A.proGeraErro(ErroExecQueryContrato.class, e);
      return query;
    }
  }
  
  @FXML
  private TMDQuery localizarAcordo() {
    TMDQuery<TEntidadeCrud> query = new TMDQuery<TEntidadeCrud>(TTypeComando.tcmSQL);
    try {
      query.setQuery(QueryBuscarAcordo.class);
      query.setRetornaResultSet(true);
      query.proAddParamFmt(lbLocalizarInst.getCodigo().isEmpty() ? "EM81_NR_INST" : lbLocalizarInst.getCodigo());
      query.proAddParamFmt(lbLocalizarCli.getCodigo().isEmpty() ? "EM01_CD_CLIENT" : lbLocalizarCli.getCodigo());
      return query; 
    } catch (Exception e) {
      X00SU0301A.proGeraErro(ErroExecQueryAcordo.class, e);
      return query;
    }
  }
  
  @FXML
  private TMDQuery localizarPrestacao() {
    TMDQuery<TEntidadeCrud> query = new TMDQuery<TEntidadeCrud>(TTypeComando.tcmSQL);
    try {
      query.setQuery(QueryBuscarPrestacao.class);
      query.setRetornaResultSet(true);
      query.proAddParamFmt(lbLocalizarInst.getCodigo().isEmpty() ? "EM83_NR_INST" : lbLocalizarInst.getCodigo());
      query.proAddParamFmt(lbLocalizarCli.getCodigo().isEmpty() ? "EM83_CD_CLIENT" : lbLocalizarCli.getCodigo());
      query.proAddParamFmt(lbLocalizarContraOrigem.getCodigo().isEmpty() ? "EM82_NR_CONTRA" : lbLocalizarContraOrigem.getCodigo());
      query.proAddParamFmt(lbLocalizarAcordo.getCodigo().isEmpty() ? "EM83_NR_ACORDO" : lbLocalizarAcordo.getCodigo());
      return query; 
    } catch (Exception e) {
      X00SU0301A.proGeraErro(ErroExecQueryPresta.class, e);
      return query;
    }
  }
   
  /*====================================================*/
  /* Mensagens de erro                                  */
  /*====================================================*/
  
  @AProperties(Mensagem = "Houve um erro ao buscar os contratos.")
  private class ErroExecQueryContrato {}; 
  
  @AProperties(Mensagem = "Houve um erro ao buscar os acordos.")
  private class ErroExecQueryAcordo {}; 
  
  @AProperties(Mensagem = "Houve um erro ao buscar as prestações.")
  private class ErroExecQueryPresta {}; 
  
  /*=========================================================================*/
  /* Queryes do Banco de Dados                                               */
  /*=========================================================================*/
  
  @ABDComando(Comando =
  "SELECT                                  \n"+
  "  EM01_NR_AGEN  ,                       \n"+
  "  EM01_CD_CLIENT,                       \n"+
  "  CL01_NM_CLIENT,                       \n"+
  "  EM01_CD_PRODUT,                       \n"+
  "  EM02_DS_PRODUR,                       \n"+
  "  EM01_NR_CRES  ,                       \n"+
  "  TG08_DS_CRESR ,                       \n"+
  "  EM01_NR_CONTRA                        \n"+
  "FROM                                    \n"+
  "  EM01, CL01, TG08, EM02                \n"+
  "WHERE                                   \n"+
  "    EM01_NR_INST   = %s                 \n"+
  "AND EM01_NR_AGEN   = %s                 \n"+
  "AND CL01_NR_INST   = EM01_NR_INST       \n"+
  "AND CL01_NR_CLIENT = EM01_CD_CLIENT     \n"+
  "AND EM02_NR_INST   = EM01_NR_INST       \n"+
  "AND EM02_CD_PRODUT = EM01_CD_PRODUT     \n"+
  "AND TG08_NR_INST   = EM01_NR_INST       \n"+
  "AND TG08_NR_CRES   = EM01_NR_CRES       \n"+
  "AND EXISTS                              \n"+
  "  (                                     \n"+
  "    SELECT                              \n"+
  "      EM82_NR_CONTRA                    \n"+
  "    FROM                                \n"+ 
  "      EM82, EM81                        \n"+
  "    WHERE                               \n"+
  "      EM82_NR_INSTAC = EM01_NR_INST     \n"+
  "  AND EM82_NR_AGEN   = EM01_NR_AGEN     \n"+
  "  AND EM82_CD_CLIAC  = EM01_CD_CLIENT   \n"+
  "  AND EM82_NR_CONTRA = EM01_NR_CONTRA   \n"+
  "  AND EM81_NR_INST   = EM82_NR_INST     \n"+
  "  AND EM81_CD_CLIENT = EM82_CD_CLIENT   \n"+
  "  AND EM81_NR_ACORDO = EM82_NR_ACORDO   \n"+
  "  AND EM81_ST_ACORDO <> 'E'             \n"+
  "  AND EM81_ST_ACORDO <> 'C'             \n"+
  "  )                                     \n"+
  "AND EM01_CD_CLIENT = %s                 \n")
  private class QueryBuscarContrato{} 
  
  @ABDComando(Comando =
  "SELECT                                    \n"+
  "  EM81_NR_ACORDO              ,           \n"+
  "  EM81_CD_CLIENT              ,           \n"+
  "  CL01_NM_CLIENT              ,           \n"+
  "  CASE EM81_ST_ACORDO                     \n"+
  "    WHEN 'F' THEN 'Aberto'                \n"+
  "    WHEN 'P' THEN 'Pendente'              \n"+
  "    WHEN 'E' THEN 'Encerrado'             \n"+
  "    WHEN 'C' THEN 'Cancelado'             \n"+
  "  END EM81_ST_ACORDO          ,           \n"+
  "  EM81_NR_CONTRA              ,           \n"+
  "  EM81_CD_PRODUT              ,           \n"+
  "  EM02_DS_PRODUR                          \n"+
  "FROM                                      \n"+
  "  EM81, CL01, EM02, EM01                  \n"+
  "WHERE                                     \n"+
  "    EM81_NR_INST    = %s                  \n"+
  "AND EM81_NR_INST    = CL01_NR_INST        \n"+
  "AND EM81_CD_CLIENT  = CL01_NR_CLIENT      \n"+
  "AND EM02_NR_INST    = EM81_NR_INST        \n"+
  "AND EM02_CD_PRODUT  = EM81_CD_PRODUT      \n"+
  "AND EM01_CD_CLIENT  = %s                  \n")
  private class QueryBuscarAcordo{} 
  
  @ABDComando(Comando =
  "SELECT                                  \n"+
  "  EM83_NR_INST  ,                       \n"+
  "  EM83_CD_CLIENT,                       \n"+
  "  CL01_NM_CLIENT,                       \n"+
  "  EM83_NR_ACORDO,                       \n"+
  "  EM83_NR_PRESTA,                       \n"+
  "  EM82_NR_CONTRA,                       \n"+
  "  EM83_DT_VCTPRE,                       \n"+
  "  EM83_VL_PRESTA                        \n"+
  "FROM                                    \n"+
  "  EM83, EM82, CL01                      \n"+
  "WHERE                                   \n"+
  "    EM83_NR_INST    = %s                \n"+
  "AND EM83_NR_INST    = CL01_NR_INST      \n"+
  "AND EM83_CD_CLIENT  = CL01_NR_CLIENT    \n"+
  "AND EM83_NR_INST    = EM82_NR_INST      \n"+
  "AND EM83_CD_CLIENT  = EM82_CD_CLIENT    \n"+
  "AND EM83_NR_ACORDO  = EM82_NR_ACORDO    \n"+
  "AND EM83_NR_PRESTA  = EM82_NR_PRESTA    \n"+
  "AND EM83_CD_CLIENT  = %s                \n"+
  "AND EM82_NR_CONTRA  = %s                \n"+
  "AND EM83_NR_ACORDO  = %s                \n")
  private class QueryBuscarPrestacao{} 
  
}