/*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  :: EMPRESA    : Sinqia                                                       ::
  :: SISTEMA    : SQ Floor Plan                                                ::
  :: MÓDULO     : Prejuízo                                                     ::
  :: OBSERVAÇÃO :                                                              ::
  ::---------------------------------------------------------------------------::
  :: PROGRAMADOR:                                                              ::
  :: DATA       :                                           VERSÃO JAVA:       ::
  :: ALTERAÇÃO  :                                                              ::
  ::---------------------------------------------------------------------------::
  :: PROGRAMADOR: Matheus Reynard                                              ::
  :: DATA       : 27/04/2022                                VERSÃO JAVA:     1 ::
  :: ALTERAÇÃO  : Primeira versão - Migração                                   ::
  ::            : SQCWB-49412 - SD-82917 - Funções -> Produtos -> Prejuízo     ::
  :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/

package x04sp05.view;

import java.math.BigDecimal;
import java.sql.ResultSet;
import java.util.List;

import javafx.fxml.FXML;
import x00sp01.x00t.ABDComando;
import x00sp01.x00t.AProperties;
import x00sp01.x00t.types.TTypeAction;
import x00sp02.entidade.TMDQueryEntidade.TTypeComando;
import x00sp03.x00c.TTIDataGrid;
import x00sp03.x00c.TTIEdit;
import x00sp03.x00c.TTILabelLocalizar;
import x00sp03.x00c.TTITelaCRUD;
import x00sp03.x00c.TTITitledPane;
import x00sp03.x00i.IConsisteCrud;
import x00sp03.x00s.X00SU0301A;
import x00sp03.x00t.TControllerTela;
import x00sp03.x00t.TLabelLocalizarActionFiltro;
import x00sp03.x00t.TMDQuery;
import x00sp03.x00t.TParamAppCliente;
import x04wp05.entidade.TEM02;
import x04wp05.entidade.TEM79;

public class X04SF0518F extends TControllerTela {

  @FXML
  private TTITelaCRUD crudEM79;
  @FXML
  private TTIEdit eFaixa;
  @FXML 
  private TTITitledPane tpDetalhes;
  @FXML 
  private TTILabelLocalizar lbLocalizarProd;
  @FXML 
  private TTIEdit eDataValidade;
  @FXML 
  private TTILabelLocalizar lbLocalizarInst;
  @FXML 
  private TTIDataGrid<TEM79> dtgEM79;
  @FXML
  private TTIEdit eLimiteMax;
  @FXML
  private TTIEdit eLimiteMin;
  
  private Integer faixaAntesEditar;
  
  public void initialize() {
    crudEM79.setParametros(TEM79.class);
    lbLocalizarInst.setCodigo(getParamApp().getInstituicaoId());
    lbLocalizarInst.setDescricao(getParamApp().getInstituicaoNome());
    lbLocalizarProd.disableProperty().bind(tpDetalhes.expandedProperty());
    sobrescreveConsiste();
  }
  
  private void sobrescreveConsiste() {
    IConsisteCrud<TEM79> consisteCrud = (entidade, retornoLog) -> {
      if (crudEM79.getAcao() == TTypeAction.tacNovo) {
        entidade.setEM79_NR_INST(Integer.valueOf(getParamApp().getInstituicaoId()));
        entidade.setEM79_CD_PRODUT(Integer.valueOf(lbLocalizarProd.getCodigo()));
      } 
      
      // Quando for salvar, verifica se a faixa informada já existe para está instituição e produto. Caso já existir mostrar mensagem de aviso.
      // Quando for editar, verifica se a faixa informada já existe só se a faixa desse registro ter sido alterada 
      if(crudEM79.getAcao() == TTypeAction.tacNovo || (crudEM79.getAcao() == TTypeAction.tacEdicao && !faixaAntesEditar.equals(entidade.getEM79_NR_FAIXA()))) {
        if(faixaExiste()) {
          retornoLog.proAdicMsgAviso(X00SU0301A.fncFormat(NumeroFaixaJaExiste.class));
        }
      }
      
      BigDecimal limiteMax = entidade.getEM79_VL_MAXLIM();
      BigDecimal limiteMin = entidade.getEM79_VL_MINLIM();
      
      if(limiteMax != null && limiteMin != null && limiteMax.compareTo(limiteMin) < 0) {
        retornoLog.proAdicMsgAviso(X00SU0301A.fncFormat(LimiteMaximoDeveSerMaiorQueOMinimo.class));
      }
      
    };

    crudEM79.setConsisteCrud(consisteCrud);
  }

  private TParamAppCliente getParamApp() {
    return TParamAppCliente.getInstance();
  }
  
  private Integer buscaProximoNumeroFaixa() {
    TMDQuery<Integer> query = new TMDQuery<>(TTypeComando.tcmSQL);
    query.setQuery(BuscaProximoNumeroFaixa.class);
    query.setRetornaResultSet(true);
    query.proAddParamFmt(getParamApp().getInstituicaoIdInt());
    query.proAddParamFmt(lbLocalizarProd.getCodigo());
    try {
      query.proExecBanco();
      ResultSet resultSet = query.getResultSet();
      if(resultSet != null && resultSet.first()) {
        return resultSet.getInt("MAX_NR_FAIXA");
      }
    } catch (Exception e) {
      X00SU0301A.proMensagem(null, ErroAoBuscarProximoNumeroFaixa.class );
    } 
    
    return null;
  }
  
  @FXML 
  private void onAfterLocalizar() {
    TEM02 produto = (TEM02) lbLocalizarProd.getSelecionado();
    if(produto != null) {
      eDataValidade.setValor(produto.getEM02_DT_VALID());
    }
  }
  
  @FXML 
  private void onAfterNovo() {
    Integer proxNumeroFaixa =  buscaProximoNumeroFaixa();
    eFaixa.setText(proxNumeroFaixa);
  }
  
  private boolean faixaExiste() {
    TMDQuery<Integer> query = new TMDQuery<>(TTypeComando.tcmSQL);
    query.setQuery(FaixaExiste.class);
    query.setRetornaResultSet(true);
    query.proAddParamFmt(eFaixa.getValor());
    query.proAddParamFmt(lbLocalizarProd.getCodigo());
    query.proAddParamFmt(getParamApp().getInstituicaoIdInt());
    try {
      query.proExecBanco();
      ResultSet resultSet = query.getResultSet();
      if(resultSet != null && resultSet.first()) {
        return resultSet.getBoolean("FAIXA_EXISTE");
      }
    } catch (Exception e) {
      X00SU0301A.proGeraErro(ErroAoBuscarProximoNumeroFaixa.class,  e);
    } 
    
    return false;
  } 
  
  @FXML 
  private void onAfterSalvar() {
    X00SU0301A.fncMensagem(MensagemSucessoSalvar.class);
    atualizaDatagridEm79();
  }
  
  @FXML 
  private void onAfterExcluir() {
    X00SU0301A.fncMensagem(MensagemSucessoExcluir.class);
    atualizaDatagridEm79();
  }
  
  @FXML 
  private void onAfterEditar() {
   faixaAntesEditar = ((TEM79) crudEM79.getSelecionado()).getEM79_NR_FAIXA();
  }
  
  @FXML 
  private void atualizaDatagridEm79() {
    TMDQuery<TEM79> query = new TMDQuery<>(TTypeComando.tcmSQL);
    query.setQuery(BuscaNumeroFaixa.class);
    query.setRetornaResultSet(true);
    query.setClassResultSet(TEM79.class);
    query.proAddParamFmt(getParamApp().getInstituicaoIdInt());
    query.proAddParamFmt(lbLocalizarProd.getCodigo());

    try {
      query.proExecBanco();
      List<TEM79> listaEm79 = query.getArrRetorno();
      if(listaEm79 != null) {
        dtgEM79.setDataProvider(listaEm79);
      }
    } catch (Exception e) {
      X00SU0301A.proGeraErro(ErroAtualizarDatagrid.class,  e);
    } 
    
  }

  @FXML 
  private void expandirDetalhes() {
    if(tpDetalhes.isExpanded() && (lbLocalizarProd.getCodigo() == null || lbLocalizarProd.getCodigo().isEmpty())) {
      tpDetalhes.setExpanded(false);
    } 

    if(tpDetalhes.isExpanded() && !lbLocalizarProd.getCodigo().isEmpty()) {
      atualizaDatagridEm79();
    }
    
    if(!tpDetalhes.isExpanded() && (crudEM79.getAcao().equals(TTypeAction.tacEdicao) || crudEM79.getAcao().equals(TTypeAction.tacNovo))) {
      tpDetalhes.setExpanded(true);
      X00SU0301A.fncMensagem(DeveSalvarORegistroAtual.class);
    }
  }

  @FXML 
  private void selecionaItem() {
    crudEM79.setSelecionado(dtgEM79.getSelecionado());
  }
  
  @FXML 
  private void onLocalizarFiltro(TLabelLocalizarActionFiltro event) {
    event.proAddFiltroSQL("EM79_CD_PRODUT = " + lbLocalizarProd.getCodigo());
  }

  @AProperties(Mensagem = "Registro salvo com sucesso.")
  private class MensagemSucessoSalvar {}
  
  @AProperties(Mensagem = "Registro excluído com sucesso.")
  private class MensagemSucessoExcluir {}
  
  @AProperties(Mensagem = "Não foi possível buscar o próximo número da faixa.")
  private class ErroAoBuscarProximoNumeroFaixa {} 
  
  @AProperties(Mensagem = "Essa faixa já existe para essa instituição e produto. Escolha outra faixa.")
  private class NumeroFaixaJaExiste {}
  
  @AProperties(Mensagem = "Ocorreu um erro ao tentar atualizar a tabela.")
  private class ErroAtualizarDatagrid {}
  
  @AProperties(Mensagem = "O limite máximo deve ser maior que o limite mínimo")
  private class LimiteMaximoDeveSerMaiorQueOMinimo {}
  
  @AProperties(Mensagem = "Para acessar os produtos é necessário salvar o registro atual.")
  private class DeveSalvarORegistroAtual {}
  
  @ABDComando(Comando = 
    "SELECT                                             \n" +
    "  COALESCE(MAX(EM79_NR_FAIXA) + 1, 0) MAX_NR_FAIXA \n" +
    "FROM                                               \n" +
    "  EM79                                             \n" +
    "WHERE                                              \n" +
    "  EM79_NR_INST = %s                                \n" +
    "AND EM79_CD_PRODUT = %s                              ") 
  private class BuscaProximoNumeroFaixa{}
  
  @ABDComando(Comando = 
    "IF EXISTS (                \n" +
    "  SELECT                   \n" +
    "    1                      \n" +
    "  FROM                     \n" +
    "    EM79                   \n" +
    "  WHERE                    \n" +
    "    EM79_NR_FAIXA = %s \n" +
    "  AND EM79_CD_PRODUT = %s  \n" +
    "  AND EM79_NR_INST = %s    \n" +
    "  )                        \n" +
    "SELECT 1 FAIXA_EXISTE      \n") 
  private class FaixaExiste{}
  
  @ABDComando(Comando = 
    "SELECT                  \n" +
    "  *                     \n" +
    "FROM                    \n" +
    "  EM79                  \n" +
    "WHERE                   \n" +
    "  EM79_NR_INST = %s     \n" +
    "AND EM79_CD_PRODUT = %s   ") 
  private class BuscaNumeroFaixa{}

}
