/*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  :: EMPRESA    : Sinqia                                                       ::
  :: SISTEMA    : SQ Crédito                                                   ::
  :: MÓDULO     : Relatório - Cancelamentos                                    ::
  :: OBSERVAÇÃO :                                                              ::
  ::- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -::
  :: PROGRAMADOR:                                                              ::
  :: DATA       :                                           VERSÃO FXML:       ::
  :: ALTERAÇÃO  :                                                              ::
  ::- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -::
  :: PROGRAMADOR: Matheus Reynard                                              ::
  :: DATA       : 31/03/2022                                VERSÃO FXML:     1 ::
  :: ALTERAÇÃO  : Primeira Versão                                              ::
  ::              SQCWB-46276 - Migração Relatórios - Cancelamentos            ::
  :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/


package x04sp01.view;

import java.util.HashMap;

import javafx.fxml.FXML;
import x00sp01.x00t.TParamApp;
import x00sp03.x00c.TTIAssistImpres;
import x00sp03.x00c.TTICheckBox;
import x00sp03.x00c.TTIEdit;
import x00sp03.x00c.TTILabelLocalizar;
import x00sp03.x00i.IAssistImpres;
import x00sp03.x00t.TControllerTela;
import x00sp03.x00t.TLabelLocalizarActionFiltro;
import x00sp03.x00t.TParamAppCliente;
import x04wp01.entidade.TEM01;
import x04wp01.entidade.TX04SR0103G;
import x04wp01.facade.TX04SR0103GFacade;



public class X04SR0103G extends TControllerTela implements IAssistImpres {
  
  private static final String ENT_NR_VRS = "18";
  private static final String ENT_ID_ATIVWF = "N";
  private static final Integer ENT_ID_STATUS = 0;
  private TTIAssistImpres assistImpress;
  
  private static final String RELATORIO_CANCELAMENTOS = "fncRelatorioCancelamentos";

  @FXML
  private TTILabelLocalizar lbLocalizarInst;
  @FXML
  private TTILabelLocalizar lbLocalizarAgen;
  @FXML
  private TTILabelLocalizar lbLocalizarCli;
  @FXML
  private TTILabelLocalizar lbLocalizarProd;
  @FXML
  private TTILabelLocalizar lbLocalizarCResp;
  @FXML
  private TTILabelLocalizar lbLocalizarContra;
 
  @FXML
  private TTICheckBox chkbxDesCancelados;
  @FXML
  private TTICheckBox chkbxPropCanceladas;
  
  @FXML
  private TTIEdit ateDtMov;
  @FXML
  private TTIEdit deDtMov;
  
  public void initialize() {
    lbLocalizarInst.setSelecionadoCD(getParamApp().getInstituicaoId());
    lbLocalizarAgen.setSelecionadoCD(getParamApp().getAgenciaId());
    ateDtMov.setValor(getParamApp().getDataRefAtual());
    deDtMov.setValor(getParamApp().getDataRefIni());  
  }
  
  public String fncMetodoDbInterface() { 
    return RELATORIO_CANCELAMENTOS;   
  }
  
  private Integer getSituacao() {
    return Integer.parseInt(chkbxDesCancelados.getValor()) + 
           Integer.parseInt(chkbxPropCanceladas.getValor());  
  }
  
  private TParamApp getParamApp() {
    return TParamAppCliente.getInstance();
  }

  @Override
  public String fncConsisteCampos() throws Exception {
    return null;
  }

  @Override
  public String fncRecuperaSubTitulo1() throws Exception {
    return null;
  }

  @Override
  public String fncRecuperaSubTitulo2() {
    return "Ref.: " + deDtMov.getText() + " a " + ateDtMov.getText();
  }

  @Override
  public Integer fncRecuperarAgencia() {
    return null;
  }

  @Override
  public Long fncBuscarFonteData() throws Exception {
    return null;
  }

  @Override
  public String fncBuscaFonteDados(String TpArquivo) throws Exception {
    return null;
  }

  @Override
  public void proParametrosAutomacao(HashMap<String, String> HasMapAutomacao,
      HashMap<String, String> HasMapCamposOrdenacao, HashMap<String, String> HasMapParametros) throws Exception {    
  }

  @Override
  public void proInicializa() throws Exception {    
  }

  @Override
  public String fncRecuperaParametros() {
    return null;
  }
  
  public Class<?> fncClassInterfaceWs() {
    return TX04SR0103GFacade.class;
  }
  
  public Object fncEntidadeFiltro() throws Exception {    
    TX04SR0103G entidade = new TX04SR0103G();    
    entidade.setENT_NR_VRS(ENT_NR_VRS);
    entidade.setENT_NR_INST(lbLocalizarInst.getCodigo().isEmpty() ? null : Integer.parseInt(lbLocalizarInst.getCodigo()));
    entidade.setENT_NR_AGEN(lbLocalizarAgen.getCodigo().isEmpty() ? null : Integer.parseInt(lbLocalizarAgen.getCodigo()));
    entidade.setENT_NR_CLIENT(lbLocalizarCli.getCodigo().isEmpty() ? null : Long.parseLong(lbLocalizarCli.getCodigo()));   
    entidade.setENT_NR_PRODUT(lbLocalizarProd.getCodigo().isEmpty() ? null : Integer.parseInt(lbLocalizarProd.getCodigo())); 
    entidade.setENT_NR_CONTRA(lbLocalizarContra.getCodigo().isEmpty() ? null : Long.parseLong(lbLocalizarContra.getCodigo()));
    entidade.setENT_NR_CRES(lbLocalizarCResp.getCodigo().isEmpty() ? null : Long.parseLong(lbLocalizarCResp.getCodigo()));
    entidade.setENT_TP_DATA(null);
    entidade.setENT_DT_INI(deDtMov.getValor().isEmpty() ?  null : Integer.parseInt(deDtMov.getValor()));
    entidade.setENT_DT_FIM(ateDtMov.getValor().isEmpty() ? null : Integer.parseInt(ateDtMov.getValor()));  
    entidade.setENT_NR_SITUAC(getSituacao());
    entidade.setENT_CD_CONVEN(null);
    entidade.setENT_CD_FILIAL(null); 
    entidade.setENT_CD_AGENT(null); 
    entidade.setENT_CD_GRPPRO(null);
    entidade.setENT_TP_CONTRA(null);
    entidade.setENT_TP_PESSOA(null);
    entidade.setENT_ID_ATIVWF(ENT_ID_ATIVWF);
    entidade.setENT_DT_REFERE(null);
    entidade.setENT_ID_FINEMP(null);
    entidade.setENT_ID_STATUS(ENT_ID_STATUS); 
    entidade.setENT_NR_MOEDA(null);  
    return entidade;
  }
  
  public void setAssistImpres(TTIAssistImpres assistImpres) {
    assistImpress = assistImpres;
  }
   
  @FXML
  private void onAfterLocalizarContrato() {  
    if (lbLocalizarContra.getSelecionado() != null) {
      TEM01 itens = lbLocalizarContra.getSelecionado();
      lbLocalizarCli.setSelecionadoCD(itens.getEM01_CD_CLIENT().toString());
      lbLocalizarProd.setSelecionadoCD(itens.getEM01_CD_PRODUT().toString());    
      lbLocalizarCResp.setSelecionadoCD(itens.getEM01_NR_CRES().toString());    
      lbLocalizarAgen.setSelecionadoCD(itens.getEM01_NR_AGEN().toString());    
    }
  }
  
  @FXML
  private void filtroLbLocalizarContra(TLabelLocalizarActionFiltro Actionlbl) {
    Actionlbl.proAddFiltroSQL(lbLocalizarCli.getCodigo().isEmpty() ? "EM01_CD_CLIENT = EM01_CD_CLIENT" : "EM01_CD_CLIENT = " + lbLocalizarCli.getCodigo() );  
    Actionlbl.proAddFiltroSQL(lbLocalizarProd.getCodigo().isEmpty() ? "EM01_CD_PRODUT = EM01_CD_PRODUT" : "EM01_CD_PRODUT  = " + lbLocalizarProd.getCodigo());  
    Actionlbl.proAddFiltroSQL(lbLocalizarCResp.getCodigo().isEmpty() ? "EM01_NR_CRES = EM01_NR_CRES" : "EM01_NR_CRES  = " + lbLocalizarCResp.getCodigo());
  }
  
}