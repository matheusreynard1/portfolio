/*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  :: EMPRESA    : Sinqia                                                       ::
  :: SISTEMA    : SQ Crédito                                                   ::
  :: MÓDULO     : Manutenção de tipo de contato                                ::
  :: OBSERVAÇÃO :                                                              ::
  ::---------------------------------------------------------------------------::
  :: PROGRAMADOR:                                                              ::
  :: DATA       :                                           VERSÃO JAVA:       ::
  :: ALTERAÇÃO  :                                                              ::
  ::---------------------------------------------------------------------------::
  :: PROGRAMADOR: Matheus Reynard                                              ::
  :: DATA       : 18/02/2022                                VERSÃO JAVA:     1 ::
  :: DESCRIÇÃO  : Primeira versão                                              ::
  ::              SD-80679 Tela de gerenciamento de tipos de contato           ::
  :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/
package x04sp01.view;

import javafx.event.EventHandler;
import javafx.fxml.FXML;
import x00sp01.x00s.X00SU0101A;
import x00sp01.x00t.ABDComando;
import x00sp01.x00t.AProperties;
import x00sp01.x00t.TRetornoLog;
import x00sp01.x00t.TValidador;
import x00sp02.entidade.TMDQueryEntidade.TTypeComando;
import x00sp03.x00c.TTIDataGrid;
import x00sp03.x00c.TTIEdit;
import x00sp03.x00i.IConsisteCrud;
import x00sp03.x00c.TTITabPane;
import x00sp03.x00c.TTITelaCRUD;
import x00sp03.x00c.TTITelaExterna;
import x00sp03.x00s.X00SU0301A;
import x00sp03.x00t.TActionRetorno;
import x00sp03.x00t.TControllerTela;
import x00sp03.x00t.TMDQuery;
import x00sp03.x00t.TParamAppCliente;
import x04sp00.entidade.TEM93;

public class X04SF0128J extends TControllerTela {

  /*=========================================================================*/
  /* Componentes FXML                                                        */
  /*=========================================================================*/
  @FXML private TTIEdit editNrTipoContato;
  @FXML private TTIEdit editDesTipoContato;
  
  @FXML private TTITelaCRUD crudTipoContato;

  @FXML private TTITabPane pnlTipoContato;

  @FXML private TTIDataGrid<TEM93> dtgTipoContato;
  
  @FXML private TTITelaExterna txPerfil;
  
  private boolean estadoBtnNovo = false;

  public void initialize() {    
    crudTipoContato.setParametros(TEM93.class); 
    consistir();
    selecionaItem();
  }
  
  private void consistir() {
    crudTipoContato.setConsisteCrud(new IConsisteCrud<TEM93>() {

    @Override
    public void proConsiste(TEM93 Entidade, TRetornoLog RetornoLog) {
      TValidador validador = new TValidador(getParamApp());   
      if(verificaDuplicidadeCadastro(Entidade) && (estadoBtnNovo))
        RetornoLog.proAdicMsgAviso(X00SU0301A.fncMgsProperties(MsgDuplicidade.class));    
      validador.setRetornoLog(RetornoLog);
      validador.proGeraInconsistencia();
    }
    });
    
  }
  
  private void selecionaItem() { 
    dtgTipoContato.setOnSelecionaItem(new EventHandler<TActionRetorno>() {
      
      @Override
      public void handle(TActionRetorno event) {
        crudTipoContato.setSelecionado(event.getObjetoSelecionado());
        
      }
    });  
  }
  
  @FXML
  private void onNovo() {
    estadoBtnNovo = true;
  }
  
  @FXML
  private void onEditar() {
    estadoBtnNovo = false;
  }
  
  private boolean verificaDuplicidadeCadastro(TEM93 contato) {
    TMDQuery<TEM93> query = new TMDQuery<TEM93>(TTypeComando.tcmSQL);
    query.setQuery(QueryBuscarContato.class);
    query.setRetornaResultSet(true);
    query.setClassResultSet(TEM93.class);
    query.proAddParamFmt(Integer.parseInt(editNrTipoContato.getValor()));
    
     try {
        query.proExecBanco();
        if(!X00SU0101A.fncIsEmpty(query.getArrRetorno())) {
          return true;
        }
     }
     catch(Exception e) {
       X00SU0301A.proGeraErro(ErroDuplicidade.class, e);
     }
       return false; 
  }
  
  private TParamAppCliente getParamApp() {
    return TParamAppCliente.getInstance();
  }
  
  @AProperties(Mensagem = "É necessário cancelar ou salvar o registro.")
  private class CancelarOuSalvar {};
  
  @AProperties(Mensagem = "Ocorreu erro ao executar a verificação de duplicidade.")
  private class ErroDuplicidade{}
  
  @AProperties(Mensagem = "Já existe um contato com o código especificado.")
  private class MsgDuplicidade{}
  
  @ABDComando(Comando =
    "SELECT                                   \n"+
    "  EM93_DS_TPCONT                         \n"+
    "FROM                                     \n"+
    "  EM93                                   \n"+
    "WHERE                                    \n"+
    "  EM93_NR_TPCONT = %s                    \n")
  private class QueryBuscarContato{}
  
}